// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.0
// source: Protos/api.proto

package grpc_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	PostSymbol(ctx context.Context, in *PostSymbolRequest, opts ...grpc.CallOption) (*PostSymbolResponse, error)
	GetSymbols(ctx context.Context, in *GetSymbolsRequest, opts ...grpc.CallOption) (*GetSymbolsResponse, error)
	GetActiveSymbols(ctx context.Context, in *GetActiveSymbolsRequest, opts ...grpc.CallOption) (*GetActiveSymbolsResponse, error)
	ToggleSymbolActivation(ctx context.Context, in *ToggleSymbolActivationRequest, opts ...grpc.CallOption) (*ToggleSymbolActivationResponse, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) PostSymbol(ctx context.Context, in *PostSymbolRequest, opts ...grpc.CallOption) (*PostSymbolResponse, error) {
	out := new(PostSymbolResponse)
	err := c.cc.Invoke(ctx, "/api.Api/PostSymbol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetSymbols(ctx context.Context, in *GetSymbolsRequest, opts ...grpc.CallOption) (*GetSymbolsResponse, error) {
	out := new(GetSymbolsResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetSymbols", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetActiveSymbols(ctx context.Context, in *GetActiveSymbolsRequest, opts ...grpc.CallOption) (*GetActiveSymbolsResponse, error) {
	out := new(GetActiveSymbolsResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetActiveSymbols", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ToggleSymbolActivation(ctx context.Context, in *ToggleSymbolActivationRequest, opts ...grpc.CallOption) (*ToggleSymbolActivationResponse, error) {
	out := new(ToggleSymbolActivationResponse)
	err := c.cc.Invoke(ctx, "/api.Api/ToggleSymbolActivation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	PostSymbol(context.Context, *PostSymbolRequest) (*PostSymbolResponse, error)
	GetSymbols(context.Context, *GetSymbolsRequest) (*GetSymbolsResponse, error)
	GetActiveSymbols(context.Context, *GetActiveSymbolsRequest) (*GetActiveSymbolsResponse, error)
	ToggleSymbolActivation(context.Context, *ToggleSymbolActivationRequest) (*ToggleSymbolActivationResponse, error)
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) PostSymbol(context.Context, *PostSymbolRequest) (*PostSymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSymbol not implemented")
}
func (UnimplementedApiServer) GetSymbols(context.Context, *GetSymbolsRequest) (*GetSymbolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSymbols not implemented")
}
func (UnimplementedApiServer) GetActiveSymbols(context.Context, *GetActiveSymbolsRequest) (*GetActiveSymbolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveSymbols not implemented")
}
func (UnimplementedApiServer) ToggleSymbolActivation(context.Context, *ToggleSymbolActivationRequest) (*ToggleSymbolActivationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleSymbolActivation not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_PostSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/PostSymbol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostSymbol(ctx, req.(*PostSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetSymbols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSymbolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetSymbols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetSymbols",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetSymbols(ctx, req.(*GetSymbolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetActiveSymbols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveSymbolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetActiveSymbols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetActiveSymbols",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetActiveSymbols(ctx, req.(*GetActiveSymbolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ToggleSymbolActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleSymbolActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ToggleSymbolActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/ToggleSymbolActivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ToggleSymbolActivation(ctx, req.(*ToggleSymbolActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostSymbol",
			Handler:    _Api_PostSymbol_Handler,
		},
		{
			MethodName: "GetSymbols",
			Handler:    _Api_GetSymbols_Handler,
		},
		{
			MethodName: "GetActiveSymbols",
			Handler:    _Api_GetActiveSymbols_Handler,
		},
		{
			MethodName: "ToggleSymbolActivation",
			Handler:    _Api_ToggleSymbolActivation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Protos/api.proto",
}
